#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
File: mock_big_data.py
Author: Gene Jiang
Email: genejiang2012@outlook.com
Github: https://github.com/genejiang2012
Description: 
"""

import random
import string
import csv
import sys
import os

from datetime import date
from datetime import timedelta

def generate_city(num):
    all_city =[]

    city_list = [
        "北京市", "东城区", "西城区", "朝阳区", "丰台区", "石景山区", "海淀区", "门头沟区", 
        "房山区", "通州区", "顺义区", "昌平区", "大兴区", "怀柔区", "平谷区", "密云区", 
        "延庆区", "天津市", "和平区", "河东区", "河西区", "南开区", "河北区", "红桥区", 
        "东丽区", "西青区", "津南区", "北辰区", "武清区", "宝坻区", "滨海新区", "宁河区", 
        "静海区", "蓟州区", "河北省", "石家庄市", "长安区", "桥西区", "新华区", "井陉矿区", 
        "裕华区", "藁城区", "鹿泉区", "栾城区", "井陉县", "正定县", "行唐县", "灵寿县", 
        "高邑县", "深泽县", "赞皇县", "无极县", "平山县", "元氏县", "赵县", "辛集市", 
        "晋州市", "新乐市", "唐山市", "路南区", "路北区", "古冶区", "开平区", "丰南区", 
        "丰润区", "曹妃甸区", "滦县", "滦南县", "乐亭县", "迁西县", "玉田县", "遵化市", 
        "迁安市", "秦皇岛市", "海港区", "山海关区", "北戴河区", "抚宁区", "青龙满族自治县", 
        "昌黎县", "卢龙县", "邯郸市", "邯山区", "丛台区", "复兴区", "峰峰矿区", "肥乡区", 
        "永年区", "临漳县", "成安县", "大名县", "涉县", "磁县", "邱县", "鸡泽县", "广平县", 
        "馆陶县", "魏县", "曲周县", "武安市", "邢台市", "桥东区", "桥西区", "邢台县", 
        "临城县", "内丘县", "柏乡县", "隆尧县", "任县", "南和县", "宁晋县", "巨鹿县", 
        "新河县", "广宗县", "平乡县", "威县", "清河县", "临西县", "南宫市", "沙河市", 
        "保定市", "竞秀区", "莲池区", "满城区", "清苑区", "徐水区", "涞水县", "阜平县", 
        "定兴县", "唐县", "高阳县", "容城县", "涞源县", "望都县", "安新县", "易县", 
        "曲阳县", "蠡县", "顺平县", "博野县", "雄县", "涿州市", "定州市", "安国市", 
        "高碑店市", "张家口市", "桥东区", "桥西区", "宣化区", "下花园区", "万全区", 
        "崇礼区", "张北县", "康保县", "沽源县", "尚义县", "蔚县", "阳原县", "怀安县", 
        "怀来县", "涿鹿县", "赤城县", "承德市", "双桥区", "双滦区", "鹰手营子矿区", 
        "承德县", "兴隆县", "滦平县", "隆化县", "丰宁满族自治县", "宽城满族自治县", 
        "围场满族蒙古族自治县", "平泉市", "沧州市", "新华区", "运河区", "沧县", "青县", 
        "东光县", "海兴县", "盐山县", "肃宁县", "南皮县", "吴桥县", "献县", 
        "孟村回族自治县", "泊头市", "任丘市", "黄骅市", "河间市", "廊坊市", "安次区", 
        "广阳区", "固安县", "永清县", "香河县", "大城县", "文安县", "大厂回族自治县", 
        "霸州市", "三河市", "衡水市", "桃城区", "冀州区", "枣强县", "武邑县", "武强县", 
        "饶阳县", "安平县", "故城县", "景县", "阜城县", "深州市", "山西省", "太原市",
        "小店区", "迎泽区", "杏花岭区", "尖草坪区", "万柏林区", "晋源区", "清徐县", 
        "阳曲县", "娄烦县", "古交市", "大同市", "城区", "矿区", "南郊区", "新荣区", 
        "阳高县", "天镇县", "广灵县", "灵丘县", "浑源县", "左云县", "大同县", "阳泉市", 
        "城区", "矿区", "郊区", "平定县", "盂县", "长治市", "城区", "郊区", "长治县", 
        "襄垣县", "屯留县", "平顺县", "黎城县", "壶关县", "长子县", "武乡县", "沁县", 
        "沁源县", "潞城市", "晋城市", "城区", "沁水县", "阳城县", "陵川县", "泽州县", 
        "高平市", "朔州市", "朔城区", "平鲁区", "山阴县", "应县", "右玉县", "怀仁县",
        "晋中市", "榆次区", "榆社县", "左权县", "和顺县", "昔阳县", "寿阳县", "太谷县",
        "祁县", "平遥县", "灵石县", "介休市", "运城市", "盐湖区", "临猗县", "万荣县", 
        "闻喜县", "稷山县", "新绛县", "绛县", "垣曲县", "夏县", "平陆县", "芮城县", 
        "永济市", "河津市", "忻州市", "忻府区", "定襄县", "五台县", "代县", "繁峙县", 
        "宁武县", "静乐县", "神池县", "五寨县", "岢岚县", "河曲县", "保德县", "偏关县", 
        "原平市", "临汾市", "尧都区", "曲沃县", "翼城县", "襄汾县", "洪洞县", "古县", 
        "安泽县", "浮山县", "吉县", "乡宁县", "大宁县", "隰县", "永和县", "蒲县", 
        "汾西县", "侯马市", "霍州市", "吕梁市", "离石区", "文水县", "交城县", "兴县", 
        "临县", "柳林县", "石楼县", "岚县", "方山县", "中阳县", "交口县", "孝义市", 
        "汾阳市", "内蒙古自治区", "呼和浩特市", "新城区", "回民区", "玉泉区", "赛罕区", 
        "土默特左旗", "托克托县", "和林格尔县", "清水河县", "武川县", "包头市", "东河区",
        "昆都仑区", "青山区", "石拐区", "白云鄂博矿区", "九原区", "土默特右旗", 
        "固阳县", "达尔罕茂明安联合旗", "乌海市", "海勃湾区", "海南区", "乌达区",    
        "赤峰市", "红山区", "元宝山区", "松山区", "阿鲁科尔沁旗", "巴林左旗", 
        "巴林右旗", "林西县", "克什克腾旗", "翁牛特旗", "喀喇沁旗", "宁城县", "敖汉旗", 
        "通辽市", "科尔沁区", "科尔沁左翼中旗", "科尔沁左翼后旗", "开鲁县", "库伦旗", 
        "奈曼旗", "扎鲁特旗", "霍林郭勒市", "鄂尔多斯市", "东胜区", "康巴什区", 
        "达拉特旗", "准格尔旗", "鄂托克前旗", "鄂托克旗", "杭锦旗", "乌审旗", 
        "伊金霍洛旗", "呼伦贝尔市", "海拉尔区", "扎赉诺尔区", "阿荣旗", 
        "莫力达瓦达斡尔族自治旗", "鄂伦春自治旗", "鄂温克族自治旗", "陈巴尔虎旗", 
        "新巴尔虎左旗", "新巴尔虎右旗", "满洲里市", "牙克石市", "扎兰屯市", "额尔古纳市",
        "根河市", "巴彦淖尔市", "临河区", "五原县", "磴口县", "乌拉特前旗", 
        "乌拉特中旗", "乌拉特后旗", "杭锦后旗", "乌兰察布市", "集宁区", "卓资县", "化德县", 
        "商都县", "兴和县", "凉城县", "察哈尔右翼前旗", "察哈尔右翼中旗", "察哈尔右翼后旗", 
        "四子王旗", "丰镇市", "兴安盟", "乌兰浩特市", "阿尔山市", "科尔沁右翼前旗", 
        "科尔沁右翼中旗", "扎赉特旗", "突泉县", "锡林郭勒盟", "二连浩特市", "锡林浩特市", 
        "阿巴嘎旗", "苏尼特左旗", "苏尼特右旗", "东乌珠穆沁旗", "西乌珠穆沁旗", "太仆寺旗",
        "镶黄旗", "正镶白旗", "正蓝旗", "多伦县", "阿拉善盟", "阿拉善左旗", "阿拉善右旗", 
        "额济纳旗", "辽宁省", "沈阳市", "和平区", "沈河区", "大东区", "皇姑区", "铁西区", 
        "苏家屯区", "浑南区", "沈北新区", "于洪区", "辽中区", "康平县", "法库县", "新民市", 
        "大连市", "中山区", "西岗区", "沙河口区", "甘井子区", "旅顺口区", "金州区", 
        "普兰店区", "长海县", "瓦房店市", "庄河市", "鞍山市", "铁东区", "铁西区", "立山区", 
        "千山区", "台安县", "岫岩满族自治县", "海城市", "抚顺市", "新抚区", "东洲区", 
        "望花区", "顺城区", "抚顺县", "新宾满族自治县", "清原满族自治县", "本溪市", 
        "平山区", "溪湖区", "明山区", "南芬区", "本溪满族自治县", "桓仁满族自治县", 
        "丹东市", "元宝区", "振兴区", "振安区", "宽甸满族自治县", "东港市", "凤城市", 
        "锦州市", "古塔区", "凌河区", "太和区", "黑山县", "义县", "凌海市", "北镇市", 
        "营口市", "站前区", "西市区", "鲅鱼圈区", "老边区", "盖州市", "大石桥市", "阜新市", 
        "海州区", "新邱区", "太平区", "清河门区", "细河区", "阜新蒙古族自治县", "彰武县", 
        "辽阳市", "白塔区", "文圣区", "宏伟区", "弓长岭区", "太子河区", "辽阳县", "灯塔市", 
        "盘锦市", "双台子区", "兴隆台区", "大洼区", "盘山县", "铁岭市", "银州区", "清河区", 
        "铁岭县", "西丰县", "昌图县", "调兵山市", "开原市", "朝阳市", "双塔区", "龙城区", 
        "朝阳县", "建平县", "喀喇沁左翼蒙古族自治县", "北票市", "凌源市", "葫芦岛市", 
        "连山区", "龙港区", "南票区", "绥中县", "建昌县", "兴城市", "吉林省", "长春市", 
        "南关区", "宽城区", "朝阳区", "二道区", "绿园区", "双阳区", "九台区", "农安县", 
        "榆树市", "德惠市", "吉林市", "昌邑区", "龙潭区", "船营区", "丰满区", "永吉县", 
        "蛟河市", "桦甸市", "舒兰市", "磐石市", "四平市", "铁西区", "铁东区", "梨树县", 
        "伊通满族自治县", "公主岭市", "双辽市", "辽源市", "龙山区", "西安区", "东丰县", 
        "东辽县", "通化市", "东昌区", "二道江区", "通化县", "辉南县", "柳河县", "梅河口市", 
        "集安市", "白山市", "浑江区", "江源区", "抚松县", "靖宇县", "长白朝鲜族自治县", 
        "临江市", "松原市", "宁江区", "前郭尔罗斯蒙古族自治县", "长岭县", "乾安县", 
        "扶余市", "白城市", "洮北区", "镇赉县", "通榆县", "洮南市", "大安市", 
        "延边朝鲜族自治州", "延吉市", "图们市", "敦化市", "珲春市", "龙井市", "和龙市", 
        "汪清县", "安图县", "黑龙江省", "哈尔滨市", "道里区", "南岗区", "道外区", "平房区", 
        "松北区", "香坊区", "呼兰区", "阿城区", "双城区", "依兰县", "方正县", "宾县", 
        "巴彦县", "木兰县", "通河县", "延寿县", "尚志市", "五常市", "齐齐哈尔市", "龙沙区", 
        "建华区", "铁锋区", "昂昂溪区", "富拉尔基区", "碾子山区", "梅里斯达斡尔族区", 
        "龙江县", "依安县", "泰来县", "甘南县", "富裕县", "克山县", "克东县", "拜泉县", 
        "讷河市", "鸡西市", "鸡冠区", "恒山区", "滴道区", "梨树区", "城子河区", "麻山区", 
        "鸡东县", "虎林市", "密山市", "鹤岗市", "向阳区", "工农区", "南山区", "兴安区", 
        "东山区", "兴山区", "萝北县", "绥滨县", "双鸭山市", "尖山区", "岭东区", "四方台区", 
        "宝山区", "集贤县", "友谊县", "宝清县", "饶河县", "大庆市", "萨尔图区", "龙凤区", 
        "让胡路区", "红岗区", "大同区", "肇州县", "肇源县", "林甸县", 
        "杜尔伯特蒙古族自治县", "伊春市", "伊春区", "南岔区", "友好区", "西林区", "翠峦区", 
        "新青区", "美溪区", "金山屯区", "五营区", "乌马河区", "汤旺河区", "带岭区", 
        "乌伊岭区", "红星区", "上甘岭区", "嘉荫县", "铁力市", "佳木斯市", "向阳区", 
        "前进区", "东风区", "郊区", "桦南县", "桦川县", "汤原县", "同江市", "富锦市"
    ]

    for i in range(num):
        city = random.choice(city_list)
        all_city.append(city)

    return all_city


def generate_province(num):
    all_province =[]
    province_list = [
                "北京市", "天津市", "河北省", "山西省", "内蒙古自治区", "辽宁省",
                 "吉林省", "黑龙江省", "上海市", "江苏省", "浙江省", "安徽省",
                 "福建省", "江西省", "山东省", "河南省", "湖北省", "湖南省",
                 "广东省", "广西壮族自治区", "海南省", "重庆市", "四川省",
                 "贵州省", "云南省", "西藏自治区", "陕西省", "甘肃省", "青海省",
                 "宁夏回族自治区", "新疆维吾尔自治区", "台湾省",
                 "香港特别行政区", "澳门特别行政区"
                     ]
    for i in range(num):
        province = random.choice(province_list)
        all_province.append(province)

    return  all_province


def generate_member_name(num):
    """

    :param num:
    :return:
    """
    all_member_id = []
    sex = []
    name_start = ['赵', '钱', '孙', '李', '周', '吴', '郑', '王', '冯', '陈',
                  '褚', '卫', '蒋', '沈', '韩', '杨', '朱', '秦', '尤', '许',
                  '何', '吕', '施', '张', '孔', '曹', '严', '华', '金', '魏',
                  '陶', '姜', '戚', '谢', '邹', '喻', '柏', '水', '窦', '章',
                  '云', '苏', '潘', '葛', '奚', '范', '彭', '郎', '鲁', '韦',
                  '昌', '马', '苗', '凤', '花', '方', '俞', '任', '袁', '柳',
                  '酆', '鲍', '史', '唐', '费', '廉', '岑', '薛', '雷', '贺',
                  '倪', '汤', '滕', '殷', '罗', '毕', '郝', '邬', '安', '常',
                  '乐', '于', '时', '傅', '皮', '卞', '齐', '康', '伍', '余',
                  '元', '卜', '顾', '孟', '平', '黄', '和', '穆', '萧', '尹',
                  '姚', '邵', '堪', '汪', '祁', '毛', '禹', '狄', '米', '贝',
                  '明', '臧', '计', '伏', '成', '戴', '谈', '宋', '茅', '庞',
                  '熊', '纪', '舒', '屈', '项', '祝', '董', '梁']
    name_end = ['先生', '小姐', '女士']
    for i in range(num):
        start = random.choice(name_start)
        end = ''.join(random.choice(name_end))
        res = start + end
        if end == '先生':
            sex.append('男')
        elif end == '小姐' or end == '女士':
            sex.append('女')
        all_member_id.append(res)

    return all_member_id, sex


def generate_member_id(num):
    """

    :param num:
    :return:
    """
    all_member_id = set()
    id_start = [
        'CU17011', 'CU17012', 'CU17013', 'CU17014', 'CU17015', 'CU17016',
        'CU17017', 'CU17018', 'CU17019', 'CU17020', 'CU17021', 'CU17022',
        'CU17023', 'CU17024', 'CU17025', 'CU17026', 'CU17027', 'CU17028'
    ]
    for i in range(num):
        start = random.choice(id_start)
        end = ''.join(random.sample(string.digits, 9))
        res = start + end
        all_member_id.add(res)

    return all_member_id


def generate_phone_number(num):
    """generate the phone number
    :returns: phone number list

    """
    all_phone_nums = set()
    num_start = ['134', '135', '136', '137', '138', '139', '150', '151', '152',
                 '158', '159', '157', '182', '187', '188', '147', '130', '131',
                 '132', '155', '156', '185', '186', '133', '153', '180', '189',
                 '171', '172', '173', '174', '175', '176', '177', '178', '179',
                 '181', '182', '183', '184', '185', '186', '187', '188', '189']
    for i in range(num):
        start = random.choice(num_start)
        end = ''.join(random.sample(string.digits, 8))
        res = start+end
        all_phone_nums.add(res)

    return all_phone_nums


def generate_channel_id(num):
    all_channel_id = []
    channel_id_start = ['10000000']
    for i in range(num):
        start = random.choice(channel_id_start)
        end = ''.join(random.sample(string.digits, 1))
        res = start + end
        all_channel_id.append(res)

    return all_channel_id


# 随机生成身份证号
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DC_PATH = BASE_DIR + "/bigdata/districtcode.txt"


def getdistrictcode():
    with open(DC_PATH) as file:
        data = file.read()
        districtlist = data.split('\n')
    for node in districtlist:
        # print node
        if node[10:11] != ' ':
            state = node[10:].strip()
        if node[10:11] == ' ' and node[12:13] != ' ':
            city = node[12:].strip()
        if node[10:11] == ' ' and node[12:13] == ' ':
            district = node[14:].strip()
            code = node[0:6]
            codelist.append({"state": state, "city": city, "district": district,
                             "code": code})


def gennerator():
    global codelist
    codelist = []
    if not codelist:
        getdistrictcode()
    id = codelist[random.randint(0, len(codelist))]['code']  # 地区项
    id = id + str(random.randint(1930, 2013))  # 年份项
    da = date.today() + timedelta(days=random.randint(1, 366))  # 月份和日期项
    id = id + da.strftime('%m%d')
    id = id + str(random.randint(100, 300))  # ，顺序号简单处理

    i = 0
    count = 0
    weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]  # 权重项
    checkcode = {'0': '1', '1': '0', '2': 'X', '3': '9', '4': '8', '5': '7',
                 '6': '6', '7': '5', '8': '5', '9': '3', '10': '2'}  # 校验码映射
    for i in range(0, len(id)):
        count = count + int(id[i]) * weight[i]
        id = id + checkcode[str(count % 11)]  # 算出校验码
        return id


def generate_id(num):
    all_id = []
    for i in range(num):
        all_id.append(gennerator())

    return all_id


def generate_big_data(file_name, num, coding_style):
    all_member_id = list(generate_member_id(num))
    all_member_name = list(generate_member_name(num))
    all_channel_id = generate_channel_id(num)
    all_mobile = list(generate_phone_number(num))
    all_province = generate_province(num)
    all_city = generate_city(num)
    all_id = list(generate_id(num))
    num_list = []
    num_list.append(len(all_member_id))
    num_list.append(len(all_mobile))
    num_list.sort()
    with open(file_name, 'a', newline='', encoding=coding_style) as f:
        csv_writer = csv.writer(f, dialect='excel')
        csv_writer.writerow(["ccid", "name", "sex", "age", "channel_id", "mobile",
                            "province", "city", "id"])
        for i in range(num_list[0]):
            line = []
            member_id = all_member_id[i]
            name = all_member_name[0][i]
            sex = all_member_name[1][i]
            channel_id = all_channel_id[i]
            mobile = all_mobile[i]
            province = all_province[i]
            people_id = all_id[i]
            city = all_city[i]
            age = random.randint(20, 60)
            line.append(member_id)
            line.append(name)
            line.append(sex)
            line.append(str(age))
            line.append(channel_id)
            line.append(mobile)
            line.append(province)
            line.append(city)
            line.append(people_id)

            print(line)
            csv_writer.writerow(line)


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("usage: bigdata.csv 100000 utf-8")
        exit(1)
    if int(sys.argv[2]) <= 2000001:
        generate_big_data(sys.argv[1], int(sys.argv[2]), sys.argv[3])
    else:
        print("line number must be equal or less than 2000000!")
    print("done")
